diff --git a/src/com/android/deskclock/Screensaver.java b/src/com/android/deskclock/Screensaver.java
index cf24d50d..984a6f7d 100644
--- a/src/com/android/deskclock/Screensaver.java
+++ b/src/com/android/deskclock/Screensaver.java
@@ -16,98 +16,212 @@
 
 package com.android.deskclock;
 
+import android.view.animation.AccelerateInterpolator;
+import android.view.animation.DecelerateInterpolator;
+import android.animation.TimeInterpolator;
+import android.animation.ObjectAnimator;
 import android.animation.Animator;
 import android.animation.AnimatorSet;
-import android.animation.ObjectAnimator;
-import android.animation.TimeInterpolator;
-import android.content.SharedPreferences;
-import android.content.res.Configuration;
-import android.graphics.Color;
-import android.graphics.Paint;
-import android.graphics.PorterDuff;
-import android.graphics.PorterDuffColorFilter;
+import android.app.Activity;
+import android.os.BatteryManager;
 import android.os.Handler;
-import android.preference.PreferenceManager;
-import android.service.dreams.DreamService;
-import android.util.Log;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.util.AttributeSet;
 import android.view.View;
-import android.view.animation.AccelerateInterpolator;
-import android.view.animation.DecelerateInterpolator;
-
-import com.android.deskclock.Utils.ScreensaverMoveSaverRunnable;
+import android.view.ViewGroup;
+import android.view.WindowManager;
+import android.widget.FrameLayout;
+import android.widget.TextView;
+import java.lang.Runnable;
+import android.util.Log;
 
-public class Screensaver extends DreamService {
+public class Screensaver extends Activity {
     static final boolean DEBUG = false;
     static final String TAG = "DeskClock/Screensaver";
 
-    private View mContentView, mSaverView;
-    private View mAnalogClock, mDigitalClock;
+    static int CLOCK_COLOR = 0xFF66AAFF;
 
-    private final Handler mHandler = new Handler();
+    static final long MOVE_DELAY = 60000; // DeskClock.SCREEN_SAVER_MOVE_DELAY;
+    static final long SLIDE_TIME = 10000;
+    static final long FADE_TIME = 1000;
 
-    private final ScreensaverMoveSaverRunnable mMoveSaverRunnable;
+    static final boolean SLIDE = false;
 
-    public Screensaver() {
-        if (DEBUG) Log.d(TAG, "Screensaver allocated");
-        mMoveSaverRunnable = new ScreensaverMoveSaverRunnable(mHandler);
-    }
+    private View mContentView, mSaverView;
 
-    @Override
-    public void onCreate() {
-        if (DEBUG) Log.d(TAG, "Screensaver created");
-        super.onCreate();
-    }
+    private static TimeInterpolator mSlowStartWithBrakes =
+        new TimeInterpolator() {
+            public float getInterpolation(float x) {
+                return (float)(Math.cos((Math.pow(x,3) + 1) * Math.PI) / 2.0f) + 0.5f;
+            }
+        };
+
+    private Handler mHandler = new Handler();
+
+    private boolean mPlugged = false;
+    private final BroadcastReceiver mPowerIntentReceiver = new BroadcastReceiver() {
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            final String action = intent.getAction();
+            if (Intent.ACTION_BATTERY_CHANGED.equals(action)) {
+                // Only keep the screen on if we're plugged in.
+                boolean plugged = (0 != intent.getIntExtra(BatteryManager.EXTRA_PLUGGED, 0));
+                if (plugged != mPlugged) {
+                    if (DEBUG) Log.v(TAG, plugged ? "plugged in" : "unplugged");
+                    mPlugged = plugged;
+                    if (mPlugged) {
+                        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
+                    } else {
+                        getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
+                    }
+                }
+            }
+        }
+    };
+
+    private final Runnable mMoveSaverRunnable = new Runnable() {
+        @Override
+        public void run() {
+            long delay = MOVE_DELAY;
+
+//            Log.d("DeskClock/Screensaver",
+//                    String.format("mContentView=(%d x %d) container=(%d x %d)",
+//                        mContentView.getWidth(), mContentView.getHeight(),
+//                        mSaverView.getWidth(), mSaverView.getHeight()
+//                        ));
+            final float xrange = mContentView.getWidth() - mSaverView.getWidth();
+            final float yrange = mContentView.getHeight() - mSaverView.getHeight();
+
+            if (xrange == 0 && yrange == 0) {
+                delay = 500; // back in a split second
+            } else {
+                final int nextx = (int) (Math.random() * xrange);
+                final int nexty = (int) (Math.random() * yrange);
+
+                if (mSaverView.getAlpha() == 0f) {
+                    // jump right there
+                    mSaverView.setX(nextx);
+                    mSaverView.setY(nexty);
+                    ObjectAnimator.ofFloat(mSaverView, "alpha", 0f, 1f)
+                        .setDuration(FADE_TIME)
+                        .start();
+                } else {
+                    AnimatorSet s = new AnimatorSet();
+                    Animator xMove   = ObjectAnimator.ofFloat(mSaverView,
+                                         "x", mSaverView.getX(), nextx);
+                    Animator yMove   = ObjectAnimator.ofFloat(mSaverView,
+                                         "y", mSaverView.getY(), nexty);
+
+                    Animator xShrink = ObjectAnimator.ofFloat(mSaverView, "scaleX", 1f, 0.85f);
+                    Animator xGrow   = ObjectAnimator.ofFloat(mSaverView, "scaleX", 0.85f, 1f);
+
+                    Animator yShrink = ObjectAnimator.ofFloat(mSaverView, "scaleY", 1f, 0.85f);
+                    Animator yGrow   = ObjectAnimator.ofFloat(mSaverView, "scaleY", 0.85f, 1f);
+                    AnimatorSet shrink = new AnimatorSet(); shrink.play(xShrink).with(yShrink);
+                    AnimatorSet grow = new AnimatorSet(); grow.play(xGrow).with(yGrow);
+
+                    Animator fadeout = ObjectAnimator.ofFloat(mSaverView, "alpha", 1f, 0f);
+                    Animator fadein = ObjectAnimator.ofFloat(mSaverView, "alpha", 0f, 1f);
+
+
+                    if (SLIDE) {
+                        s.play(xMove).with(yMove);
+                        s.setDuration(SLIDE_TIME);
+
+                        s.play(shrink.setDuration(SLIDE_TIME/2));
+                        s.play(grow.setDuration(SLIDE_TIME/2)).after(shrink);
+                        s.setInterpolator(mSlowStartWithBrakes);
+                    } else {
+                        AccelerateInterpolator accel = new AccelerateInterpolator();
+                        DecelerateInterpolator decel = new DecelerateInterpolator();
+
+                        shrink.setDuration(FADE_TIME).setInterpolator(accel);
+                        fadeout.setDuration(FADE_TIME).setInterpolator(accel);
+                        grow.setDuration(FADE_TIME).setInterpolator(decel);
+                        fadein.setDuration(FADE_TIME).setInterpolator(decel);
+                        s.play(shrink);
+                        s.play(fadeout);
+                        s.play(xMove.setDuration(0)).after(FADE_TIME);
+                        s.play(yMove.setDuration(0)).after(FADE_TIME);
+                        s.play(fadein).after(FADE_TIME);
+                        s.play(grow).after(FADE_TIME);
+                    }
+                    s.start();
+                }
+
+                long now = System.currentTimeMillis();
+                long adjust = (now % 60000);
+                delay = delay
+                        + (MOVE_DELAY - adjust) // minute aligned
+                        - (SLIDE ? 0 : FADE_TIME) // start moving before the fade
+                        ;
+                if (DEBUG) Log.d(TAG, 
+                        "will move again in " + delay + " now=" + now + " adjusted by " + adjust);
+            }
+
+            mHandler.removeCallbacks(this);
+            mHandler.postDelayed(this, delay);
+        }
+    };
 
     @Override
-    public void onConfigurationChanged(Configuration newConfig) {
-        if (DEBUG) Log.d(TAG, "Screensaver configuration changed");
-        super.onConfigurationChanged(newConfig);
-        mHandler.removeCallbacks(mMoveSaverRunnable);
-        layoutClockSaver();
-        mHandler.post(mMoveSaverRunnable);
+    public void onStart() {
+        super.onStart();
+        CLOCK_COLOR = getResources().getColor(R.color.screen_saver_color);
+        setContentView(R.layout.desk_clock_saver);
+        mSaverView = findViewById(R.id.main_clock);
+        mContentView = (View) mSaverView.getParent();
+        mSaverView.setAlpha(0);
+
+        AndroidClockTextView timeDisplayHours = (AndroidClockTextView) findViewById(R.id.timeDisplayHours);
+        if (timeDisplayHours != null) {
+            timeDisplayHours.setTextColor(CLOCK_COLOR);
+            AndroidClockTextView timeDisplayMinutes = (AndroidClockTextView) findViewById(R.id.timeDisplayMinutes);
+            if (timeDisplayMinutes != null)
+                timeDisplayMinutes.setTextColor(CLOCK_COLOR);
+            AndroidClockTextView amPm = (AndroidClockTextView)findViewById(R.id.am_pm);
+            if (amPm != null)
+                amPm.setTextColor(CLOCK_COLOR);
+        }
+
+        final IntentFilter filter = new IntentFilter();
+        filter.addAction(Intent.ACTION_BATTERY_CHANGED);
+        registerReceiver(mPowerIntentReceiver, filter);
     }
 
     @Override
     public void onAttachedToWindow() {
-        if (DEBUG) Log.d(TAG, "Screensaver attached to window");
-        super.onAttachedToWindow();
-
-        // We want the screen saver to exit upon user interaction.
-        setInteractive(false);
+        getWindow().addFlags(
+                WindowManager.LayoutParams.FLAG_ALLOW_LOCK_WHILE_SCREEN_ON
+              | WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED
+              );
+        mSaverView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LOW_PROFILE);
+    }
 
-        setFullscreen(true);
 
-        layoutClockSaver();
+    @Override
+    public void onStop() {
+        unregisterReceiver(mPowerIntentReceiver);
+        super.onStop();
+    }
 
+    @Override
+    public void onResume() {
+        super.onResume();
         mHandler.post(mMoveSaverRunnable);
     }
 
     @Override
-    public void onDetachedFromWindow() {
-        if (DEBUG) Log.d(TAG, "Screensaver detached from window");
-        super.onDetachedFromWindow();
-
+    public void onPause() {
+        super.onPause();
         mHandler.removeCallbacks(mMoveSaverRunnable);
     }
 
-    private void setClockStyle() {
-        Utils.setClockStyle(this, mDigitalClock, mAnalogClock,
-                ScreensaverSettingsActivity.KEY_CLOCK_STYLE);
-        mSaverView = findViewById(R.id.main_clock);
-        boolean dimNightMode = PreferenceManager.getDefaultSharedPreferences(this)
-                .getBoolean(ScreensaverSettingsActivity.KEY_NIGHT_MODE, false);
-        Utils.dimClockView(dimNightMode, mSaverView);
-        setScreenBright(!dimNightMode);
-    }
-
-    private void layoutClockSaver() {
-        setContentView(R.layout.desk_clock_saver);
-        mDigitalClock = findViewById(R.id.digital_clock);
-        mAnalogClock =findViewById(R.id.analog_clock);
-        setClockStyle();
-        mContentView = (View) mSaverView.getParent();
-        mSaverView.setAlpha(0);
-
-        mMoveSaverRunnable.registerViews(mContentView, mSaverView);
+    @Override
+    public void onUserInteraction() {
+        finish();
     }
 }
