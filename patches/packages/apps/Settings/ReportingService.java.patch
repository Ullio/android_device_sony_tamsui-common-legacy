diff --git a/src/com/android/settings/cmstats/ReportingService.java b/src/com/android/settings/cmstats/ReportingService.java
index b8b54d2d8..414c79830 100644
--- a/src/com/android/settings/cmstats/ReportingService.java
+++ b/src/com/android/settings/cmstats/ReportingService.java
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2012 The CyanogenMod Project
+ * Copyright (C) 2017 The LineageOS Project
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,33 +17,23 @@
 
 package com.android.settings.cmstats;
 
-import java.util.ArrayList;
-import java.util.List;
-
-import org.apache.http.NameValuePair;
-import org.apache.http.client.HttpClient;
-import org.apache.http.client.entity.UrlEncodedFormEntity;
-import org.apache.http.client.methods.HttpPost;
-import org.apache.http.impl.client.DefaultHttpClient;
-import org.apache.http.message.BasicNameValuePair;
-
-import android.app.Notification;
-import android.app.NotificationManager;
-import android.app.PendingIntent;
 import android.app.Service;
-import android.content.ComponentName;
-import android.content.Context;
 import android.content.Intent;
 import android.os.IBinder;
 import android.util.Log;
 
-import com.android.settings.R;
-import com.android.settings.Settings;
+import java.io.BufferedInputStream;
+import java.io.BufferedReader;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.io.OutputStream;
+import java.net.HttpURLConnection;
+import java.net.URL;
+
+import org.json.JSONException;
+import org.json.JSONObject;
 
-import com.google.analytics.tracking.android.GoogleAnalytics;
-import com.google.analytics.tracking.android.Tracker;
 
-import com.android.settings.R;
 
 public class ReportingService extends Service {
     protected static final String TAG = "CMStats";
@@ -80,44 +71,61 @@ public class ReportingService extends Service {
         Log.d(TAG, "SERVICE: Carrier=" + deviceCarrier);
         Log.d(TAG, "SERVICE: Carrier ID=" + deviceCarrierId);
 
-        // report to google analytics
-        GoogleAnalytics ga = GoogleAnalytics.getInstance(this);
-        Tracker tracker = ga.getTracker(getString(R.string.ga_trackingId));
-        tracker.sendEvent(deviceName, deviceVersion, deviceCountry, null);
-        // this really should be set at build time...
-        // format of version should be:
-        // version[-date-type]-device
-        String[] parts = deviceVersion.split("-");
-        String deviceVersionNoDevice = null;
-        if (parts.length == 2) {
-            deviceVersionNoDevice = parts[0];
-        }
-        else if (parts.length == 4) {
-            deviceVersionNoDevice = parts[0] + "-" + parts[2];
+        // JSON submission as found on cm-11 branch and on LineageParts repository
+        JSONObject json = new JSONObject();
+        try {
+            json.put("device_hash", deviceId);
+            json.put("device_name", deviceName);
+            json.put("device_version", deviceVersion);
+            json.put("device_country", deviceCountry);
+            json.put("device_carrier", deviceCarrier);
+            json.put("device_carrier_id", deviceCarrierId);
+        } catch (JSONException e) {
+            Log.e(TAG, "Could not encode statistics into JSON object. ", e);
         }
-        if (deviceVersionNoDevice != null)
-            tracker.sendEvent("checkin", deviceName, deviceVersionNoDevice, null);
-        tracker.close();
 
-        // report to the cmstats service
-        HttpClient httpclient = new DefaultHttpClient();
-        HttpPost httppost = new HttpPost("http://stats.cyanogenmod.org/submit");
+        // Sending JSON object to the Lineage stats server as implemented in LineageParts
         try {
-            List<NameValuePair> kv = new ArrayList<NameValuePair>(5);
-            kv.add(new BasicNameValuePair("device_hash", deviceId));
-            kv.add(new BasicNameValuePair("device_name", deviceName));
-            kv.add(new BasicNameValuePair("device_version", deviceVersion));
-            kv.add(new BasicNameValuePair("device_country", deviceCountry));
-            kv.add(new BasicNameValuePair("device_carrier", deviceCarrier));
-            kv.add(new BasicNameValuePair("device_carrier_id", deviceCarrierId));
-            httppost.setEntity(new UrlEncodedFormEntity(kv));
-            httpclient.execute(httppost);
-            getSharedPreferences("CMStats", 0).edit().putLong(AnonymousStats.ANONYMOUS_LAST_CHECKED,
-                    System.currentTimeMillis()).apply();
+            URL url = new URL("https://stats.lineageos.org/api/v1/stats");
+            HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
+            try {
+                urlConnection.setInstanceFollowRedirects(true);
+                urlConnection.setDoOutput(true);
+                urlConnection.setDoInput(true);
+                urlConnection.setRequestProperty("Content-Type", "application/json; charset=UTF-8");
+
+                OutputStream os = urlConnection.getOutputStream();
+                os.write(json.toString().getBytes("UTF-8"));
+                os.close();
+
+                int responseCode = urlConnection.getResponseCode();
+                if (responseCode != HttpURLConnection.HTTP_OK) {
+                    InputStream responseStream = new BufferedInputStream (urlConnection.getErrorStream());
+                    BufferedReader responseStreamReader = new BufferedReader (new InputStreamReader(responseStream));
+                    String line = "";
+                    StringBuilder stringBuilder = new StringBuilder();
+                    while ((line = responseStreamReader.readLine()) != null) {
+                        stringBuilder.append(line).append("\n");
+                    }
+                    responseStreamReader.close();
+                    responseStream.close();
+                    Log.e(TAG, "LineageOS server responded with failure: " + stringBuilder.toString());
+                } else {
+                    Log.d(TAG, "LineageOS stats update succeeded (response code " + responseCode +")");
+                }
+
+                getSharedPreferences("CMStats", 0).edit().putLong(AnonymousStats.ANONYMOUS_LAST_CHECKED, System.currentTimeMillis()).apply();
+            } catch (Exception e) {
+                Log.e(TAG, "Error during LineageOS stats update. ", e);
+            } finally {
+                urlConnection.disconnect();
+            }
         } catch (Exception e) {
-            Log.e(TAG, "Got Exception", e);
+            Log.e(TAG, "Error when setting up LineageOS stats procedure. ", e);
         }
+
         ReportingServiceManager.setAlarm(this);
         stopSelf();
     }
+
 }
